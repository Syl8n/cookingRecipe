plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'jacoco'
}

group = 'zerobase.group2'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

jacoco {
	// JaCoCo 버전
	toolVersion = '0.8.5'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "${project.reporting.baseDir}/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

test {
	useJUnitPlatform()

	jacoco {
		enabled = true
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
		includes = []
		excludes = []
		excludeClassLoaders = []
		includeNoLocationClasses = false
		sessionId = "<auto-generated value>"
		dumpOnExit = true
		classDumpDir = null
		output = JacocoTaskExtension.Output.FILE
		address = "localhost"
		port = 6300
		jmx = false
	}

//	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	reports {
		// 원하는 리포트를 켜고 끌 수 있습니다.
		html.enabled true
		xml.enabled false
		csv.enabled false

//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//  html.destination file("$buildDir/jacocoHtml")
//  xml.destination file("$buildDir/jacoco.xml")
	}

//	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	// 커버리지 기준
	violationRules {
//		rule {
//			element = 'CLASS'
//
//			limit {
//				 counter 지정하지 않으면 default는 'INSTRUCTION'
//				설정 가능한 counter
//				LINE: 빈 줄을 제외한 실제 코드의 라인 수
//				BRANCH: 조건문 등의 분기 수
//				CLASS: 클래스 수
//				METHOD: 메소드 수
//				INSTRUCTION (default): Java 바이트코드 명령 수. Java bytecode instruction listings
//				COMPLEXITY: 복잡도.
//
//				 value 지정하지 않으면 default는 'COVEREDRATIO'
//				TOTALCOUNT: 전체 개수
//				MISSEDCOUNT: 커버되지 않은 개수
//				COVEREDCOUNT: 커버된 개수
//				MISSEDRATIO: 커버되지 않은 비율. 0부터 1 사이의 숫자로, 1이 100%입니다.
//				COVEREDRATIO (default): 커버된 비율. 0부터 1 사이의 숫자로, 1이 100%입니다.
//
//				minimum = 0.30
//			}
//		}

		// 여러 룰을 생성할 수 있습니다.
		rule {
			// 룰을 간단히 켜고 끌 수 있습니다.
			enabled = true

			// 룰을 체크할 단위는 클래스 단위
			element = 'CLASS'
//			BUNDLE (default): 패키지 번들
//			PACKAGE: 패키지
//			CLASS: 클래스
//			SOURCEFILE: 소스파일
//			METHOD: 메소드

			// 커버리지 체크 할 클래스들. 없으면 전체 적용.
			includes = [
					'zerobase.group2.cookingRecipe.*.service'
			]

			// 브랜치 커버리지를 최소한 90% 만족시켜야 합니다.
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			// 라인 커버리지를 최소한 80% 만족시켜야 합니다.
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 빈 줄을 제외한 코드의 라인수를 최대 500라인으로 제한합니다.
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 500
			}

//			// 커버리지 체크를 제외할 클래스들
//			excludes = [
//					//      '*.test.*',
//					'**.cookingRecipe.**'
//			]

		}
	}
}

task testCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}